"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.init = init;
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _SourceMap = _interopRequireDefault(require("./SourceMap"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let Module;

function arrayFromEmbind(from, mutate) {
  let arr = [];

  for (let i = from.size() - 1; i >= 0; i--) {
    arr[i] = from.get(i);
    if (mutate) mutate(arr[i]);
  }

  from.delete();
  return arr;
}

function patchMapping(mapping) {
  mapping.generated.line++;
  if (mapping.name < 0) delete mapping.name;

  if (mapping.source < 0) {
    delete mapping.source;
    delete mapping.original;
  } else {
    mapping.original.line++;
  }

  return mapping;
}

function arrayToEmbind(Type, from) {
  let arr = new Module.VectorString();

  for (let v of from) {
    arr.push_back(v);
  }

  return arr;
}

class WasmSourceMap extends _SourceMap.default {
  constructor() {
    super();
    this.sourceMapInstance = new Module.SourceMap();
  }

  static generateEmptyMap(sourceName, sourceContent, lineOffset = 0) {
    let map = new WasmSourceMap();
    map.addEmptyMap(sourceName, sourceContent, lineOffset);
    return map;
  }

  addRawMappings(mappings, sources, names, lineOffset = 0, columnOffset = 0) {
    let sourcesVector = arrayToEmbind(Module.VectorString, sources);
    let namesVector = arrayToEmbind(Module.VectorString, names);
    this.sourceMapInstance.addRawMappings(mappings, sourcesVector, namesVector, lineOffset, columnOffset);
    return this;
  }

  findClosestMapping(line, column) {
    let mapping = this.sourceMapInstance.findClosestMapping(line, column);

    if (mapping.generated.line === -1) {
      return null;
    } else {
      return this.indexedMappingToStringMapping(patchMapping(mapping));
    }
  }

  getMap() {
    let mappings = arrayFromEmbind(this.sourceMapInstance.getMappings(), patchMapping);
    return {
      mappings,
      sources: arrayFromEmbind(this.sourceMapInstance.getSources()),
      names: arrayFromEmbind(this.sourceMapInstance.getNames())
    };
  }

  toVLQ() {
    return {
      mappings: this.sourceMapInstance.getVLQMappings(),
      sources: arrayFromEmbind(this.sourceMapInstance.getSources()),
      names: arrayFromEmbind(this.sourceMapInstance.getNames())
    };
  }

}

exports.default = WasmSourceMap;

function init(RawModule) {
  return new Promise(res => RawModule().then(v => {
    Module = v;
    res();
  }));
}